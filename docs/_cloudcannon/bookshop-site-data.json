{"site":{"posts":[{"draft":false,"categories":[],"layout":"post","title":"Reverse a Singly Linked List","date":"2022-12-05 06:45:00 -0500","image":"/images/post-1.jpg","tags":["small-algo","linked-list"],"slug":"reverse-single-linked-list copy","ext":".markdown","excerpt":"<h2 id=\"reversing-the-list\">Reversing the List</h2>\n","content":"<h2 id=\"reversing-the-list\">Reversing the List</h2>\n\n<p>This post will reveal how to reverse a singly linked list with constant space, which is also in-place as we will modify the original list.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># python 3.10\n</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">next_</span><span class=\"p\">:</span> <span class=\"n\">Node</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">reverse_list_inplace</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">Node</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"k\">while</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n        <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span>\n        <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n</code></pre></div></div>\n\n<p><br />\nI first use a temporary pointer <code class=\"language-plaintext highlighter-rouge\">tmp</code> to hold the reference to the next node, modify the <code class=\"language-plaintext highlighter-rouge\">next</code> pointer of the current node to hold the reference to the previous node instead of the next node, update <code class=\"language-plaintext highlighter-rouge\">prev</code> pointer, and finally move to the original next node stored in the <code class=\"language-plaintext highlighter-rouge\">tmp</code> pointer. I continue the process until reaching the end of the linked list.</p>\n\n<p>Here I only need to allocate memory for two additional pointers; one for reference to the previous node, and one for the next node.</p>\n\n<hr />\n\n<h2 id=\"backward-traversal\">Backward Traversal</h2>\n\n<p>The trick can help us traverse the singly linked list backward. Unlike the doubly linked list where we can move the iterator to the tail of the list and traverse backward with the member pointer, the singly linked list only has a member pointer to the next node. One way to achieve the same behavior with the singly linked list is to use a stack; traverse the linked list, store the values in a stack on the fly, and finally pop them out sequentially. However, this will cost us O(n) extra space to hold the values in the stack.</p>\n\n<p>If we reverse the linked list, and then traverse backward while doing a second reversal, we can eventually get the same result with a singly linked list without introducing linear space.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">print_list_backward</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">Node</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"bp\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"k\">while</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n        <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span>\n        <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n\n    <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n    <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"bp\">None</span>\n    <span class=\"k\">while</span> <span class=\"n\">node</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n        <span class=\"c1\"># reverse the list again\n</span>        <span class=\"c1\"># to keep the input list unchanged\n</span>        <span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span>\n        <span class=\"n\">node</span><span class=\"p\">.</span><span class=\"n\">next_</span> <span class=\"o\">=</span> <span class=\"n\">prev</span>\n        <span class=\"n\">prev</span> <span class=\"o\">=</span> <span class=\"n\">node</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"n\">tmp</span>\n\n</code></pre></div></div>\n\n<hr />\n\n<h3 id=\"relevant-questions\">Relevant Questions</h3>\n\n<ul>\n  <li><a href=\"https://leetcode.com/problems/remove-nodes-from-linked-list/\" title=\"LeetCode 2487. Remove Nodes From Linked List\">2487. Remove Nodes From Linked List</a></li>\n</ul>\n","url":"/blog/reverse-single-linked-list-copy","relative_path":"_posts/2022-12-5-reverse-single-linked-list copy.markdown","permalink":null},{"draft":false,"categories":[],"layout":"post","title":"Maximum Number of Non-overlapping Palindrome Substrings","date":"2022-12-07 06:45:00 -0500","image":"/images/post-2.jpg","tags":["leetcode","palindrome"],"slug":"maximum-number-of-non-overlapping-palindrome-substrings","ext":".markdown","excerpt":"<h2 id=\"leetcode-2472\">LeetCode 2472</h2>\n","content":"<h2 id=\"leetcode-2472\">LeetCode 2472</h2>\n\n<p>In this post, I will talk about the solution to the LeetCode problem <a href=\"https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/description/\" title=\"LeetCode 2472. Maximum Number of Non-overlapping Palindrome Substrings\">2471. Minimum Number of Operations to Sort a Binary Tree by Level</a>.</p>\n\n<h2 id=\"solution\">Solution</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># python 3.10\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">max_palindromes</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># i, j palindrome, inclusive\n</span>    <span class=\"n\">is_pal</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">n</span>\n    <span class=\"k\">for</span> <span class=\"n\">len_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">k</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">len_</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">len_</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n            <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n    <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"c1\"># only need to consider k and k+1 length\n</span>        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"p\">]):</span>\n            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"c1\"># move to t, where t is the tail of a palindrome\n</span>            <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"n\">k</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">is_pal</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"n\">k</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">i</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n\n</code></pre></div></div>\n\n<p><br />\nThe intuition is to use a greedy algorithm starting from index 0 and iterate forward; the shortest substring candidate is our best shot among all the substrings that are at least k length starting at index i, because it will give us the longest remaining string for our finding onward, namely, it will grant us the best chance to find another valid substring and thus yield a better answer.</p>\n\n<p>Also, if we can find a valid substring at index i, there is no need to search for the substring starting index (i+1) and potentially sacrifice our current substring at index i. This is because the optimal substring length is either k or (k+1), which is another important observation for optimization.</p>\n\n<hr />\n\n<h2 id=\"why-search-for-k-and-k1-only\">Why Search for k and k+1 Only</h2>\n\n<p>An interesting property of palindrome: If a string of (k+2) length is a palindrome, its substring of k length will be a palindrome too, as shown below.</p>\n\n<p>Given any palindrome whose composition can be expressed with characters A, B, and C of any choice (they can be the same) and starts at index 0.</p>\n\n<p>If (k+2) is odd, say 5, and we have a (k+2) length palindrome whose composition is CBABC, we will have a k length palindrome, BAB. Although we can’t count it at index 0, it will certainly be included in the next iteration of index 1.</p>\n\n<p>If (k+2) is even, say 4, and we have a (k+2) length palindrome whose composition is BCCB, we can apply the same procedure to get a palindrome of k, CC at index 1.</p>\n\n<p>Learning from the deduction above, we can reduce the search at index i to the palindromes of k and (k+1) length only; we can reduce k+2n length palindrome to k and k+2n+1 length palindrome to (k+1) where n is a constant</p>\n\n<h2 id=\"other-techniques\">Other Techniques</h2>\n\n<p>I use the same technique for <a href=\"/blog/palindromic-substrings\">Palindromic Substrings</a> to optimize for the validity query of palindrome; here we choose to use tabulation for simplicity. We also prune the operation and move the next step to t+1 when we find a valid substring ending at t</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>I guess the inspiration here is that (k+2) length palindromes can be reduced to k length, a property that might be found useful in the future.</p>\n\n<hr />\n\n<h3 id=\"relevant-questions\">Relevant Questions</h3>\n\n<ul>\n  <li><a href=\"https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/description/\" title=\"LeetCode 2472. Maximum Number of Non-overlapping Palindrome Substrings\">2471. Minimum Number of Operations to Sort a Binary Tree by Level</a></li>\n  <li><a href=\"https://leetcode.com/problems/palindromic-substrings/description/\" title=\"LeetCode 647. Palindromic Substrings\">647. Palindromic Substrings</a></li>\n</ul>\n","url":"/blog/maximum-number-of-non-overlapping-palindrome-substrings","relative_path":"_posts/2022-12-7-maximum-number-of-non-overlapping-palindrome-substrings.markdown","permalink":null},{"draft":false,"categories":[],"layout":"post","title":"Minimum Swaps to Sort","date":"2022-12-07 06:45:00 -0500","image":"/images/post-3.jpg","tags":["small-algo","sort"],"slug":"minimum-swaps-to-sort copy","ext":".markdown","excerpt":"<h2 id=\"lets-sort\">Let’s Sort</h2>\n","content":"<h2 id=\"lets-sort\">Let’s Sort</h2>\n\n<p>This post will introduce the easiest way, in my opinion, to count the minimum number of swaps to sort an array. The algorithm generally runs in O(NlogN) time, dominated by the complexity of the sorting algorithm. It will, however, cost us additional O(n) space for the sorted array and original indexes to be compared (plus space used in sorting of course).</p>\n\n<p>Note that the method should only be applied when the elements in the array are unique, and it thus disregards the stability of sorting.</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># python 3.10\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">min_swap_to_sort</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">):</span>\n    <span class=\"n\">indexes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">i</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)}</span>\n\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">,</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">arr</span><span class=\"p\">)):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n            <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]],</span> <span class=\"n\">arr</span><span class=\"p\">[</span><span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">x</span>\n            <span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">],</span> <span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">y</span><span class=\"p\">],</span> <span class=\"n\">indexes</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span>\n            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n</code></pre></div></div>\n\n<p><br />\nI first create a hashmap of value and index pairs and a sorted version of the original array. Then, zip out two arrays and compare the elements; if the element is not in the right position, I make a swap, update the indexes, and increment the counter. The process is straightforward.</p>\n\n<hr />\n\n<h3 id=\"relevant-questions\">Relevant Questions</h3>\n\n<ul>\n  <li><a href=\"https://leetcode.com/problems/minimum-number-of-operations-to-sort-a-binary-tree-by-level/\" title=\"LeetCode 2471. Minimum Number of Operations to Sort a Binary Tree by Level\">2471. Minimum Number of Operations to Sort a Binary Tree by Level</a></li>\n</ul>\n","url":"/blog/minimum-swaps-to-sort-copy","relative_path":"_posts/2022-12-7-minimum-swaps-to-sort copy.markdown","permalink":null},{"draft":false,"categories":[],"layout":"post","title":"Palindromic Substrings","date":"2022-12-07 06:45:00 -0500","image":"/images/post-4.jpg","tags":["leetcode","palindrome"],"slug":"palindromic-substrings","ext":".markdown","excerpt":"<h2 id=\"leetcode-647\">LeetCode 647</h2>\n","content":"<h2 id=\"leetcode-647\">LeetCode 647</h2>\n\n<p>In this post, I will talk about the 3 different approaches to solve the LeetCode problem <a href=\"https://leetcode.com/problems/palindromic-substrings/description/\" title=\"LeetCode 647. Palindromic Substrings\">647. Palindromic Substrings</a>. The first two solutions are memoization and tabulation, which in my opinion, is more general in their usage, and the last one is quite specific to the problem, being optimized for space.</p>\n\n<h2 id=\"solution\">Solution</h2>\n\n<p>The naive solution is to brute force enumeration of substrings, which takes O(n^2) time, and conduct a palindrome test on each of them. To optimize for time, we have two solutions in dynamic programming</p>\n\n<h2 id=\"tabulation\">Tabulation</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\"># python 3.10\n</span>\n<span class=\"k\">def</span> <span class=\"nf\">count_substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">dp</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"bp\">True</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">n</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">n</span>\n    <span class=\"k\">for</span> <span class=\"n\">len_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">-</span><span class=\"n\">len_</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"n\">len_</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n            <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">dp</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n</code></pre></div></div>\n\n<p><br />\nBecause there is a relationship of the palindrome test between the substring from index i to j and the substring from (i+1) to (j-1), we can populate the table starting working on substrings with the length of 2, then move to substrings with the length of 3, and so on. The base case is when i == j, where the length of substrings is 1.</p>\n\n<h2 id=\"memoization\">Memoization</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">cache</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">count_substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"o\">@</span><span class=\"n\">cache</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_pal</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"n\">j</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">True</span>\n        <span class=\"k\">return</span> <span class=\"n\">is_pal</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]</span>\n\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n            <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">is_pal</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n</code></pre></div></div>\n\n<p><br />\nSimilar to tabulation, we can also have the recursive function to handle the recurrence relation of the substrings and cache the result.</p>\n\n<h2 id=\"center-window\">Center Window</h2>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">count_substrings</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">count_pal</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span> <span class=\"ow\">and</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">]:</span>\n            <span class=\"n\">i</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">j</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">-</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">//</span> <span class=\"mi\">2</span>\n\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"c1\"># odd length palindrome\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">count_pal</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n        <span class=\"c1\"># even length palindrome\n</span>        <span class=\"n\">out</span> <span class=\"o\">+=</span> <span class=\"n\">count_pal</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">out</span>\n</code></pre></div></div>\n\n<p><br />\nOnce we finish processing substrings from index (i+1) to (j-1) and move on to substrings from index i to j, we can discard the table of the former since it is no longer useful. Therefore, to optimize the space used, we can actually count the valid substrings on the fly and throw away the intermediate results.\nWe start by traversing the center of the possible palindromes, iterate the possible length of the substrings, beginning with the length of 1 and 2, which is to simply expand the head and tail of the substrings. We break the iteration if the substring is not palindrome because its superstrings will not be a palindrome either.</p>\n\n<h2 id=\"summary\">Summary</h2>\n\n<p>Personally I prefer the dynamic programming method, because it is more general and the recurrence is more straightforward. For example, If I ever need to do a <a href=\"/blog/maximum-number-of-non-overlapping-palindrome-substrings\">quick query</a> with the head and tail indexes to determine whether a substring is a palindrome, the cache constructed from the first two methods will come in handy. The last method gives us excellent space complexity, O(1), because it knows that the intermediate results are irrelevant to this particular question. Overall, all three methods are easy enough to come up with in a 45-minute interview. I know there is a better way to do it with Manacher’s algorithm, but because it is harder to understand, I decided to leave it to the next time.</p>\n\n<hr />\n\n<h3 id=\"relevant-questions\">Relevant Questions</h3>\n\n<ul>\n  <li><a href=\"https://leetcode.com/problems/maximum-number-of-non-overlapping-palindrome-substrings/description/\" title=\"LeetCode 2472. Maximum Number of Non-overlapping Palindrome Substrings\">2471. Minimum Number of Operations to Sort a Binary Tree by Level</a></li>\n  <li><a href=\"https://leetcode.com/problems/palindromic-substrings/description/\" title=\"LeetCode 647. Palindromic Substrings\">647. Palindromic Substrings</a></li>\n</ul>\n","url":"/blog/palindromic-substrings","relative_path":"_posts/2022-12-8-palindromic-substrings.markdown","permalink":null}],"pages":[{"draft":false,"categories":[],"layout":"default","title":"About Kuan-You Lin","content_blocks":[{"_bookshop_name":"page-heading","title":"About","description":null},{"_bookshop_name":"page-image","image":"/images/avatar.jpg","image_alt":"Author Portrait"},{"_bookshop_name":"content","content_html":"<p>\n  I am <strong>Kuan-You Lin</strong>, a graduate student from Cornell, software developers... essentially a legal alien in New York, trying to find its way of living, with nothing but a heart and a desire for learning and adventures. I moved to New York in 2021 from Taiwan to advance my degree in <strong>Information Systems and Applied Information Science</strong> (yes..they somehow have a program with 2 astonishing similar degrees to offer, all packed in 2 years). I interned at Circle, the company that issues USDC, the second largest stable coin, and mainly worked on the frontend of a multi-user stablecoin vault called Circle Account with <strong>TypeScript and React-ish libraries</strong>. On the other hand, I spent half of my time helping re-organize and extend a newly acquired entity with <strong>Java</strong>, primarily for the data access object(DAO). All my work was done in production standard, and I cooperated with other engineers directly in CI/CD and Agile working style.\n</p><p>\n  Before moving to the US, I had a major in International Business and a couple of experiences in business analysis and computational finance, including internship at Allianz Global Investors, BNP Paribas Cardif, and Yuanta Financial Holdings (Proprietary Trading). At the time, I thought about being a consultant or a banker like all the other business students did, which I sometimes find funny in retrospect.\n</p><p>\n  My main interest right now is to design and build an easily maintainable, not overly engineered, quick and responsive software or product. I therefore invest most of my time in <strong>architectures, low-level behaviors of languages, algorithms, and designs of data structures</strong>, and am still open to other topics as I try to converge my expertise. \n</p><p>\n  I started this website to collect and share some study notes, organize my projects, and perhaps most importantly, help me find a good job ☺️.\n</p><p>\n  By the way, I have organized my journey so far in bullet points below. If you enjoy enumerative reading more, you might find the following section suits your needs.\n</p>\n<hr/>\n<h1>Vitae</h1> <img src=\"/images/cornell.png\" alt=\"Cornell Banner\" style=\"margin-bottom: 40px\"/> <h3><u>Education</u></h3> <p style=\"margin-bottom:0\">\n  <strong>Cornell University</strong><span style=\"float:right\">2021 - 2023</span>\n</p> <p style=\"margin-bottom:0\">\n  <i>Master of Science in Information Systems</i>\n  <ul style=\"margin-left: 40px\">\n    <li>Grading Assistant - CS 5435: Security and Privacy in the Wild</li>\n    <li>Grading Assistant - NBAY 5710: Cryptocurrencies and Blockchains</li>\n    <li>Grading Assistant - TECH 5920: BigCo Studio</li>\n  </ul>\n</p> <p style=\"margin-bottom:0\">\n  <strong>Technion</strong><span style=\"float:right\">2021 - 2023</span>   \n</p> <p>\n  <i>Master of Science in Applied Information Science</i>\n</p>\n  <p style=\"margin-bottom:0\"> \n  <strong>New York University</strong><span style=\"float:right\">2021 - 2021</span>\n</p> <p>\n  <i>Certificate of Distinction in Computer Science</i>\n</p> <p style=\"margin-bottom:0\">\n  <strong>National Taiwan University</strong><span style=\"float:right\">2016 - 2020</span>\n</p> <p>\n  <i>Bachelor of Business Administration</i>\n</p>\n<img src=\"/images/circle.png\" alt=\"Circle Banner\" style=\"margin-bottom: 40px\"/> <h3><u>Experience</u></h3> <p style=\"margin-bottom:0\">\n  <strong>Circle</strong><span style=\"float:right\">2022 - 2022</span>\n</p> <p>\n  <i>Software Engineer Intern</i>\n</p> <p style=\"margin-bottom:0\">\n  <strong>BNP Paribas Cardif</strong><span style=\"float:right\">2020 - 2021</span>   \n</p> <p>\n  <i>Software Engineer Intern</i>\n</p>\n  <p style=\"margin-bottom:0\"> \n  <strong>Yuanta Financial Holdings - Proprietary Trading</strong><span style=\"float:right\">2020 - 2020</span>\n</p> <p>\n  <i>Software Engineer Intern</i>\n</p>\n<h3><u>Honors & Awards</u></h3> <p style=\"margin-bottom:0\">\n  <strong>ICPC Columbia University Local Contest</strong><span style=\"float:right\">2022</span>\n</p> <p>\n  <i>Top 25 of 400 Participants </i>\n</p> <p style=\"margin-bottom:0\">\n  <strong>Jacobs Technion-Cornell Institute</strong><span style=\"float:right\">2021</span>\n</p> <p>\n  <i>Merit-based Scholarship</i>\n</p>\n<h3><u>Projects</u></h3> <p style=\"margin-bottom:0\">\n  <strong>NYC Mayor Office</strong><span style=\"float:right\">2022</span>\n</p> <p>\n  <i>How Might We Track & Manage the City Rat Population</i>\n</p> <p style=\"margin-bottom:0\">\n  <strong>Weil Cornell</strong><span style=\"float:right\">2022</span>\n</p> <p>\n  <i>SPECIAL - Pregnancy Risk Prediction Machine Learning Model and Website</i>\n</p>"},{"_bookshop_name":"newsletter","newsletter_title":"Join my mailing list","newsletter_description":"The mailing list will be available soon, but you can sign up first!","newsletter_identifier":"cornell.us18.list-manage.com/subscribe/post?u=04c363d27b04004815ffb3724&amp;id=565de5f4e6&amp;f_id=007f6de7f0","newsletter_button":"Subscribe"}],"slug":"about","ext":".html","tags":[],"excerpt":"","date":"2022-12-09 22:29:23 -0500","content":"","url":"/about/","relative_path":"_pages/about.html","permalink":null},{"draft":false,"categories":[],"layout":"default","title":"Coming","content_blocks":[{"_bookshop_name":"page-heading","title":"More and More...","description":null},{"_bookshop_name":"content","content_html":"<p>Tons of exciting contents are on the way. The website is still under developing, and more materials will be posted here aperiodically. Thank you for the patient and make sure to stay in tune! 👋</p>"}],"slug":"coming","ext":".html","tags":[],"excerpt":"","date":"2022-12-09 22:29:23 -0500","content":"","url":"/coming/","relative_path":"_pages/coming.html","permalink":null},{"draft":false,"categories":[],"layout":"default","permalink":"/","title":"Home","content_blocks":[{"_bookshop_name":"hero","title":"Hi. I'm Kuan-You. I Do Software.","description_html":"<p><strong>Software Engineer @ NYC</strong>. I love solving problems with concise and reliable solutions, and building software is one of the many ways to do it.</p>","image":"/images/avatar.jpg","image_alt":"Kuan-You's picture","cta_button":"About Me","cta_button_link":"/about","works_button":"See my posts","works_button_link":"#posts"},{"_bookshop_name":"blog-section","title":"Recent Posts","description_html":"<p>A list of my study notes on various topics. All works are original with references to different materials. Hope you enjoy it! ✌️</p>","link_url":"/posts","show_posts":true},{"_bookshop_name":"newsletter","newsletter_title":"Join my mailing list","newsletter_description":"The mailing list will be available soon, but you can sign up first!","newsletter_identifier":"cornell.us18.list-manage.com/subscribe/post?u=04c363d27b04004815ffb3724&amp;id=565de5f4e6&amp;f_id=007f6de7f0","newsletter_button":"Subscribe"}],"slug":"index","ext":".html","tags":[],"excerpt":"","date":"2022-12-09 22:29:23 -0500","content":"","url":"/","relative_path":"_pages/index.html"},{"draft":false,"categories":[],"layout":"default","title":"Posts","content_blocks":[{"_bookshop_name":"page-heading","title":"Posts","description":"A list of my study notes on various topics. All works are original with references to different materials. Hope you enjoy it! ✌️"},{"_bookshop_name":"posts-list","show_posts":true},{"_bookshop_name":"newsletter","newsletter_title":"Join my mailing list","newsletter_description":"Get inspiration, updates and, cool stuff!","newsletter_identifier":"frnla.us6.list-manage.com/subscribe/post?u=6314d69a3f315af7ce3fb00a0&amp;id=3038727cc3","newsletter_button":"Subscribe"}],"slug":"posts","ext":".html","tags":[],"excerpt":"","date":"2022-12-09 22:29:23 -0500","content":"","url":"/posts/","relative_path":"_pages/posts.html","permalink":null},{"draft":false,"categories":[],"layout":"default","title":"Projects","content_blocks":[{"_bookshop_name":"page-heading","title":"My works","description":"A list of my works will be available soon ⏳"},{"_bookshop_name":"projects-list","show_projects":false},{"_bookshop_name":"newsletter","newsletter_title":"Join my mailing list","newsletter_description":"Get inspiration, updates and, cool stuff!","newsletter_identifier":"frnla.us6.list-manage.com/subscribe/post?u=6314d69a3f315af7ce3fb00a0&amp;id=3038727cc3","newsletter_button":"Subscribe"}],"slug":"projects","ext":".html","tags":[],"excerpt":"","date":"2022-12-09 22:29:23 -0500","content":"","url":"/projects/","relative_path":"_pages/projects.html","permalink":null}],"projects":[],"testimonials":[],"data":{"author":{"author_name":"Kuan-You Lin","author_image":"/images/avatar.jpg"},"footer":{"footer_menu__settings":{"menu__items":[{"title":"Home","url":"/"},{"title":"Projects","url":"/projects/"},{"title":"About","url":"/about/"},{"title":"Posts","url":"/posts/"}]},"copyright_text_html":"<p> <script>document.write( new Date().getFullYear() );</script> &copy; <a href=\"/\">KY</a>. All Rights Reserved.</p>"},"general_settings":{"title":"KY","description":"Kuan-You Lin's Portfolio.","social_media_share_image":"/images/avatar.jpg"},"navigation":{"logo_image":"/images/logo.svg","menu__settings":{"menu__items":[{"title":"Home","url":"/"},{"title":"About","url":"/about/"},{"title":"Posts","url":"/posts/"},{"title":"Projects","url":"/projects/"},{"title":"More","submenu":[{"title":"Coming 👷","url":"/coming/"}]}]}},"newsletter":{"newsletter_title":"Join my mailing list","newsletter_description":"The mailing list will be available soon, but you can sign up first!","newsletter_identifier":"cornell.us18.list-manage.com/subscribe/post?u=04c363d27b04004815ffb3724&amp;id=565de5f4e6&amp;f_id=007f6de7f0","newsletter_button":"Subscribe"},"social_links":{"social":[{"icon":"Github","link":"https://github.com/linvingalliswell"},{"icon":"Twitter","link":"https://twitter.com/kylinkylin9527"},{"icon":"LinkedIn","link":"https://www.linkedin.com/in/linkuanyou/"}]}},"baseurl":null,"title":"KYLIN."}}